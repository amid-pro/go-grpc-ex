// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: server.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Items_GetItem_FullMethodName        = "/main.Items/GetItem"
	Items_GetStreamItems_FullMethodName = "/main.Items/GetStreamItems"
)

// ItemsClient is the client API for Items service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemsClient interface {
	GetItem(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*ItemDescription, error)
	GetStreamItems(ctx context.Context, in *ItemsIds, opts ...grpc.CallOption) (Items_GetStreamItemsClient, error)
}

type itemsClient struct {
	cc grpc.ClientConnInterface
}

func NewItemsClient(cc grpc.ClientConnInterface) ItemsClient {
	return &itemsClient{cc}
}

func (c *itemsClient) GetItem(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*ItemDescription, error) {
	out := new(ItemDescription)
	err := c.cc.Invoke(ctx, Items_GetItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetStreamItems(ctx context.Context, in *ItemsIds, opts ...grpc.CallOption) (Items_GetStreamItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Items_ServiceDesc.Streams[0], Items_GetStreamItems_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &itemsGetStreamItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Items_GetStreamItemsClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type itemsGetStreamItemsClient struct {
	grpc.ClientStream
}

func (x *itemsGetStreamItemsClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ItemsServer is the server API for Items service.
// All implementations must embed UnimplementedItemsServer
// for forward compatibility
type ItemsServer interface {
	GetItem(context.Context, *ItemId) (*ItemDescription, error)
	GetStreamItems(*ItemsIds, Items_GetStreamItemsServer) error
	mustEmbedUnimplementedItemsServer()
}

// UnimplementedItemsServer must be embedded to have forward compatible implementations.
type UnimplementedItemsServer struct {
}

func (UnimplementedItemsServer) GetItem(context.Context, *ItemId) (*ItemDescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedItemsServer) GetStreamItems(*ItemsIds, Items_GetStreamItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamItems not implemented")
}
func (UnimplementedItemsServer) mustEmbedUnimplementedItemsServer() {}

// UnsafeItemsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemsServer will
// result in compilation errors.
type UnsafeItemsServer interface {
	mustEmbedUnimplementedItemsServer()
}

func RegisterItemsServer(s grpc.ServiceRegistrar, srv ItemsServer) {
	s.RegisterService(&Items_ServiceDesc, srv)
}

func _Items_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetItem(ctx, req.(*ItemId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetStreamItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ItemsIds)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ItemsServer).GetStreamItems(m, &itemsGetStreamItemsServer{stream})
}

type Items_GetStreamItemsServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type itemsGetStreamItemsServer struct {
	grpc.ServerStream
}

func (x *itemsGetStreamItemsServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

// Items_ServiceDesc is the grpc.ServiceDesc for Items service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Items_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Items",
	HandlerType: (*ItemsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _Items_GetItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStreamItems",
			Handler:       _Items_GetStreamItems_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
